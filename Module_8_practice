import json
import pandas as pd
import numpy as np
import os

file_dir_find = os.path.isdir('/Users/davidadams/Desktop/Schooling/Columbia/Module_8')
file_dir = '/Users/davidadams/Desktop/Schooling/Columbia/Module_8'

with open(f'{file_dir}/wikipedia-movies.json', mode='r') as file:
    wiki_movies_raw = json.load(file)

print(len(wiki_movies_raw))

# Print the first five records
print(wiki_movies_raw[:5])

# Last five rows
wiki_movies_raw[-5:]

# List some records in the middle of the dataset
wiki_movies_raw[3400:3605]

csv_find = os.path.isdir('/Users/davidadams/Desktop/Schooling/Columbia/Module_8/1resources')
print(csv_find)

csv_dir = '/Users/davidadams/Desktop/Schooling/Columbia/Module_8/1resources'

kaggle_metadata = pd.read_csv(f'{csv_dir}/movies_metadata.csv', low_memory=False)
ratings = pd.read_csv(f'{csv_dir}/ratings.csv')

kaggle_metadata.sample(n=5)

ratings.sample(n=5)

wiki_movies_df = pd.DataFrame(wiki_movies_raw)
wiki_movies_df.head()
wiki_movies_df.columns.tolist()

# if director or directed by in movie and imbd link in movie loop
wiki_movies = [movie for movie in wiki_movies_raw if ('Director' in movie or 'Directed by' in movie) and 'imdb_link' in movie and 'No. of episodes' not in movie]
print(len(wiki_movies))

wiki_movies_df = pd.DataFrame(wiki_movies)
wiki_movies_df.head()

def clean_movie(movie):
    movie_copy = dict(movie)
    return movie_copy

wiki_movies_df[wiki_movies_df['Arabic'].notnull()]

sorted(wiki_movies_df.columns.tolist())

# Clean the data
def clean_movie(movie):
    movie = dict(movie) #create a non-destructive copy
    alt_titles = {}
    for key in ['Also known as','Arabic','Cantonese','Chinese','French',
                'Hangul','Hebrew','Hepburn','Japanese','Literally',
                'Mandarin','McCuneâ€“Reischauer','Original title','Polish',
                'Revised Romanization','Romanized','Russian',
                'Simplified','Traditional','Yiddish']:
        if key in movie:
            alt_titles[key] = movie[key]
            movie.pop(key)
    if len(alt_titles) > 0:
        movie['alt_titles'] = alt_titles

# Merge column names
def change_column_name(old_name, new_name):
    if old_name in movie:
        movie[new_name] = movie.pop(old_name)
        change_column_name('Adaptation by', 'Writer(s)')
        change_column_name('Country of origin', 'Country')
        change_column_name('Directed by', 'Director')
        change_column_name('Distributed by', 'Distributor')
        change_column_name('Edited by', 'Editor(s)')
        change_column_name('Length', 'Running time')
        change_column_name('Original release', 'Release date')
        change_column_name('Music by', 'Composer(s)')
        change_column_name('Produced by', 'Producer(s)')
        change_column_name('Producer', 'Producer(s)')
        change_column_name('Productioncompanies ', 'Production company(s)')
        change_column_name('Productioncompany ', 'Production company(s)')
        change_column_name('Released', 'Release Date')
        change_column_name('Release Date', 'Release date')
        change_column_name('Screen story by', 'Writer(s)')
        change_column_name('Screenplay by', 'Writer(s)')
        change_column_name('Story by', 'Writer(s)')
        change_column_name('Theme music composer', 'Composer(s)')
        change_column_name('Written by', 'Writer(s)')
    return movie

clean_movies = [clean_movie(movie) for movie in wiki_movies]

wiki_movies_df = pd.DataFrame(clean_movies)
sorted(wiki_movies_df.columns.tolist())

print(wiki_movies_df.head())

#finding the imbd id using regular expressions and drop duplicates of IMDb
wiki_movies_df['imdb_id'] = wiki_movies_df['imdb_link'].str.extract(r'(tt\d{7})')
print(len(wiki_movies_df))
wiki_movies_df.drop_duplicates(subset='imdb_id', inplace=True)
print(len(wiki_movies_df))
wiki_movies_df.head()

# Get how many null values are in each columns
[[column,wiki_movies_df[column].isnull().sum()] for column in wiki_movies_df.columns]

# Run a loop to find out how many are less than 90% isnull
[column for column in wiki_movies_df.columns if wiki_movies_df[column].isnull().sum() < len(wiki_movies_df) * 0.9]

# Clean the dataframe with the new columns created above
wiki_columns_to_keep = [column for column in wiki_movies_df.columns if wiki_movies_df[column].isnull().sum() < len(wiki_movies_df) * 0.9]
wiki_movies_df = wiki_movies_df[wiki_columns_to_keep]
wiki_movies_df.head()

print(wiki_movies_df.dtypes)

box_office = wiki_movies_df['Box office'].dropna()
print(len(box_office))

# Write funntion to see what is not a string in the box office column
def is_not_a_string(x):
    return type(x) != str

box_office[box_office.map(is_not_a_string)]
